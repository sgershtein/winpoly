/*****************************************************************
Файл описания функций, экспортирумых DDL постановки задачи:
   1. calcprev() - функция попятного движения
   2. Qset(), Pset() - функции, задающие множества P и Q
   3. comment() - возвращает краткий комментарий к задаче
*****************************************************************/

#define ldb long double

#ifdef __DLL__
   #define DLLC __export
#else
   #define DLLC __import
#endif   // __DLL__

// ------------------------------------------------------------
// Функция calcprev - задает попятное движение для точки x при
// заданных векторах управления u,v в момент времени t, шаг по
// времени h
// Параметры (все - long double,
// rx и ry - фактические, остальные формальные):
//    Результирующая точка: (rx,ry)
//    Текущая точка (x):  (cx,cy)
//    Значение управления u: (ux,uy)
//    Значение управления v: (vx,vy)
//    Текущее время t: t
//    Шаг по времени (delta): h
// Результатом работы функции должно быть присвоение значений
// параметрам rx и ry
// ------------------------------------------------------------
typedef void (DLLC __stdcall Fcalcprev)(
   ldb &rx, ldb &ry, // result point
   ldb cx, ldb cy,   // current point
   ldb vx, ldb vy,   // v
   ldb ux, ldb uy,   // u
   ldb t, ldb h);

// ------------------------------------------------------------
// Функция findPvalue - вычисление управления U, путем решения
// относительно него уравнения задачи при известных остальных величинах.
// ВНИМАНИЕ!  Движение производится в ПРЯМОМ времени!
// Параметры (все - long double,
// ux и uy - фактические, остальные формальные):
//    Результирующая точка: (rx,ry)
//    Текущая точка (x):  (cx,cy)
//    Искомое значение управления u: (ux,uy)
//    Значение управления v: (vx,vy)
//    Текущее время t: t
//    Шаг по времени (delta): h
// Результатом работы функции должно быть присвоение значений
// параметрам ux и uy
// ------------------------------------------------------------
typedef void (DLLC __stdcall FfindPvalue)(
   ldb rx, ldb ry, // result point
   ldb cx, ldb cy,   // current point
   ldb vx, ldb vy,   // v
   ldb &ux, ldb &uy,   // u
   ldb t, ldb h);

// ------------------------------------------------------------
// Функции Pset и Qset задают множества P и Q в виде набора
// координат вершин. Обе этих функции устанавливают значение
// своего первого аргумента в количество вершин. Значение второго
// аргумента устанавливается в указатель на массив координат
// вершин (для каждой вершины в массиве последовательно указывается
// координата x и y)
// ------------------------------------------------------------
typedef void (DLLC __stdcall FPQset)(
   unsigned &pcount, // количество вершин
   ldb* &pptr);   // указатель на массив координат

// ------------------------------------------------------------
// Функция comment возвращает краткий комментарий, описывающий
// текущую задачу
// ------------------------------------------------------------
typedef char* (DLLC __stdcall Fcomment)();

// ------------------------------------------------------------
// Функция params возвращает значения параметров расчета по
// умолчанию
// ------------------------------------------------------------
typedef void (DLLC __stdcall Fparams)(
   ldb &T,        // целевое время
   bool &fixedT,  // в фиксированное время (true) или к моменту (false)
   ldb &delta,    // шаг по времени
   ldb &sieve);   // величина ячейки "сита" (для просеивания)

// если подключен файл tfield.h то определяем дополнительные функции
#ifdef _TFIELD_H_
   // ------------------------------------------------------------
   // Функция MField возвращает целевое множество M для текущей
   // задачи
   // ------------------------------------------------------------
   typedef far TField* (DLLC __stdcall FMField)();

   // ------------------------------------------------------------
   // Функция SecField возвращает отсекающее множество для
   // указанного момента времени (сечение отсекающего множества
   // в момент времени t)
   // ------------------------------------------------------------
   typedef far TField* (DLLC __stdcall FSecField)(ldb t);

#else
   #define TField ERROR_tfield_h_must_be_included
#endif

#ifndef __DLL__
   #define NAME(X) #X
   #define calcprevName NAME(calcprev)
   #define findPvalueName NAME(findpvalue)
   #define QsetName NAME(Qset)
   #define PsetName NAME(Pset)
   #define commentName NAME(comment)
   #define MFieldName NAME(MField)
   #define SecFieldName NAME(SecField)
   #define paramsName NAME(params)
#else
   // описываем функции, которые ОБЯЗАНЫ присутствовать в DLL
   extern "C" Fcalcprev calcprev;
   extern "C" FPQset Pset;
   extern "C" FPQset Qset;
   extern "C" Fcomment comment;
#endif


