//
// Для компиляции и сборки dll используется команда: bcc32 -tWDE file.cpp
//

/*************************************************************
  / x' = -y + u1 + v1
  \ y' = x + u2 + v2

  P - квадрат (-1,1) (1,1) (1,-1) (-1,-1)
  Q - квадрат c центром (0,0) и вершинами на осях координат:
      (sqrt(2)-1,0) (0,-sqrt(2)+1) (-sqrt(2)+1,0) (0,sqrt(2)-1)

*************************************************************/

#include "dllfunc.h"
#include <math.h>

// множество P. Задается координатами вершин (последовательно x и y)
ldb P[] = {
    1 ,  1  ,
   -1 ,  1  ,
   -1 , -1  ,
    1 , -1
};

// множество Q. Задается координатами вершин (последовательно x и y)
ldb Q[] = {
      sqrt(2)-1 , 0          ,
              0 , sqrt(2)-1  ,
   -(sqrt(2)-1) , 0          ,
              0 , -(sqrt(2)-1)
};

// ------------------------------------------------------------
// Функция calcprev - задает попятное движение для точки x при
// заданных векторах управления u,v в момент времени t, шаг по
// времени h
// Параметры (все - long double,
// rx и ry - фактические, остальные формальные):
//    Результирующая точка: (rx,ry)
//    Текущая точка (x):  (cx,cy)
//    Значение управления u: (ux,uy)
//    Значение управления v: (vx,vy)
//    Текущее время t: t
//    Шаг по времени (delta): h
// Результатом работы функции должно быть присвоение значений
// параметрам rx и ry
// ------------------------------------------------------------
#pragma argsused
extern "C" Fcalcprev calcprev {
   rx = ( cx - h*( -cy + ux + vx ) );
   ry = ( cy - h*( cx + uy + vy ) );
}

// ------------------------------------------------------------
// Функция comment возвращает краткий комментарий, описывающий
// текущую задачу
// ------------------------------------------------------------
extern "C" Fcomment comment {
   return "Вращающийся квадрат. Метод Эйлера.";
}

// ------------------------------------------------------------
// Функции Pset и Qset задают множества P и Q в виде набора
// координат вершин. Обе этих функции устанавливают значение
// своего первого аргумента в количество вершин. Значение второго
// аргумента устанавливается в указатель на массив координат
// вершин (для каждой вершины в массиве последовательно указывается
// координата x и y)
// ------------------------------------------------------------
extern "C" FPQset Pset {
   pptr = (ldb*)&P;
   pcount = sizeof(P)/sizeof(P[0])/2;
}
extern "C" FPQset Qset {
   pptr = (ldb*)&Q;
   pcount = sizeof(Q)/sizeof(Q[0])/2;
}


